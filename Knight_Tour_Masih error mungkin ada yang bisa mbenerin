#include <iostream>
#include <vector>
#include <utility>
using namespace std;
void printBoard(vector<vector<bool>> v){
    for(int i=0;i<8;i++){
        for(int j=0;j<8;j++){
            if(v[i][j])
                cout<<"*";
            else 
                cout<<"_";
        }
        cout<<endl;
    }
}
vector<pair<int, int>> forEveryPossibleState(int i, int j) {
    vector<pair<int, int>> p;
    int moves[8][2] = {{-2, -1}, {-2, 1}, {2, -1}, {2, 1}, {-1, -2}, {-1, 2}, {1, -2}, {1, 2}};
    for (int k = 0; k < 8; ++k) {
        int ni = i + moves[k][0];
        int nj = j + moves[k][1];
        if (ni >= 0 && ni < 8 && nj >= 0 && nj < 8) {
            p.push_back(make_pair(ni, nj));
        }
    }
    return p;
}
bool searchEveryPossibleState(int i,int j,vector<vector<bool>> v, int totalMove){
    v[i][j]=true;
    if(totalMove == 64)
    {
        printBoard(v);
        return true;
    }
    vector<pair<int, int>> s;
    s = forEveryPossibleState(i, j);

    for (const auto& coordinates : s) {
        int ni = coordinates.first;
        int nj = coordinates.second;
        if(!v[ni][nj]){ 
            if(searchEveryPossibleState(ni,nj,v, totalMove+1)){ 
                return true;
            }
        }
    }
    // Backtrack
    return false;
}
void runEveryPossibleState(){
    std::vector<std::vector<bool>> v(8, std::vector<bool>(8, false));
    for(int i=0;i<8;i++){
        for(int j=0;j<8;j++){
            if(searchEveryPossibleState(i,j,v,0))
                return;
        }
    }
}
int main() {
    runEveryPossibleState();
    return 0;
}
